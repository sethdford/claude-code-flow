#!/usr/bin/env node
/**
 * Local Claude-Flow wrapper script
 * Automatically generated by claude-flow init
 */

// Try to use local installation first, then global, then npx
import { spawn, execSync } from 'child_process';
import { join } from 'path';
import { existsSync } from 'fs';

async function findClaudeFlow() {
  // Method 1: Check for local node_modules installation
  const localPath = join(process.cwd(), 'node_modules', '.bin', 'claude-flow');
  if (existsSync(localPath)) {
    return localPath;
  }
  
  // Method 2: Check for global installation
  try {
    const globalPath = execSync('which claude-flow', { encoding: 'utf8' }).trim();
    if (globalPath && existsSync(globalPath)) {
      return 'claude-flow';
    }
  } catch (error) {
    // Global not found, continue
  }
  
  // Method 3: Use npx as fallback
  return 'npx @sethdouglasford/claude-flow@latest';
}

async function main() {
  try {
    const claudeFlowCmd = await findClaudeFlow();
    const args = process.argv.slice(2);
    
    // Determine if we need to split the command for npx
    const cmdParts = claudeFlowCmd.split(' ');
    const command = cmdParts[0];
    const baseArgs = cmdParts.slice(1);
    
    const child = spawn(command, [...baseArgs, ...args], {
      stdio: 'inherit',
      shell: process.platform === 'win32'
    });
    
    child.on('error', (error) => {
      console.error('Failed to start claude-flow:', error.message);
      process.exit(1);
    });
    
    child.on('exit', (code) => {
      process.exit(code || 0);
    });
    
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}

main();
